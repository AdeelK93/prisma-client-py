name: Release
# TODO: on: workflow_dispatch
on:
  push:
    branches:
      - main
  pull_request:
    # TODO: this should run for every pr
    branches:
      - main
      - feat/rust-bindings
      - ci/rust-wheels

jobs:
  release-build:
    name: Release build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
    env:
      working-directory: ./src/query-engine

    runs-on: ${{ matrix.os }}
    steps:
      # Largely inspired by https://github.com/starship/starship/blob/35a0a20f5c4fea6a08e1b91ff631b089eef8fc50/.github/workflows/deploy.yml
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -U maturin

      - name: Install linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools gcc-multilib

      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Build wheel (with sdist)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        working-directory: ${{ env.working-directory }}
        run: |
          # manylinux
          maturin build --release -o dist --target ${{ matrix.target }} --cargo-extra-args="--features vendored-openssl"
          # musllinux
          maturin build --release -o dist --target ${{ matrix.target }} --cargo-extra-args="--features vendored-openssl" --no-sdist --compatibility musllinux_1_1

      # ring doesn't support aarch64 windows yet
      - name: Build wheel (windows aarch64)
        if: matrix.target == 'aarch64-pc-windows-msvc'
        working-directory: ${{ env.working-directory }}
        run: maturin build --release -o dist --target ${{ matrix.target }} --no-sdist --cargo-extra-args="--features vendored-openssl"

      - name: Build wheel (without sdist)
        if: ${{ matrix.target != 'x86_64-unknown-linux-musl' && matrix.target != 'aarch64-pc-windows-msvc' }}
        working-directory: ${{ env.working-directory }}
        run: maturin build --release -o dist --target ${{ matrix.target }} --no-sdist --cargo-extra-args="--features vendored-openssl"

      - name: Build wheel (macOS universal2)
        if: matrix.target == 'x86_64-apple-darwin'
        working-directory: ${{ env.working-directory }}
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: '10.9'
        run: |
          # set SDKROOT for C dependencies like ring and bzip2
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          rustup target add aarch64-apple-darwin
          maturin build --release -o dist --no-sdist --universal2 --cargo-extra-args="--features vendored-openssl"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ${{ env.working-directory }}/dist

  release-musl:
    name: Release musl build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", manylinux: "2014" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", manylinux: "2014"},
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", manylinux: "2010"},
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
    env:
      working-directory: ./src/query-engine
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo -H python3 -m pip install --upgrade pip wheel
          python3 -m pip install -U maturin

      - name: Build wheel
        working-directory: ${{ env.working-directory }}
        run: |
          # manylinux
          maturin build --release -o dist --no-sdist \
            --target ${{ matrix.platform.target }} \
            --manylinux ${{ matrix.platform.manylinux }} \
            --cargo-extra-args="--features vendored-openssl" \
          # musllinux
          maturin build --release -o dist --no-sdist \
            --target ${{ matrix.platform.target }} \
            --compatibility musllinux_1_1 \
             --cargo-extra-args="--features vendored-openssl" \

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ${{ env.working-directory }}/dist
