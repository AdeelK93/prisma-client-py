- case: create_data_incorrect_inputs
  main: |
    from prisma import Client

    async def main() -> None:
      client = Client()
      await client.post.create()  # E: Too few arguments for "create" of "PostActions"  [call-arg]

      await client.post.create({'published': False})  # E: Key 'title' missing for TypedDict "PostCreateInput"  [typeddict-item]
      await client.post.create({'title': 'Hello, world'})  # E: Key 'published' missing for TypedDict "PostCreateInput"  [typeddict-item]

      await client.post.create({'title': 'a', 'published': 'false'})  # E: Incompatible types (expression has type "str", TypedDict item "published" has type "bool")  [typeddict-item]

- case: create_optional_data
  main: |
    from prisma import Client

    async def main() -> None:
      client = Client()
      post = await client.post.create({'title': 'Hello', 'published': True})
      reveal_type(post)  # N: Revealed type is 'prisma.models.Post*'
      reveal_type(post.id)  # N: Revealed type is 'builtins.str'
      reveal_type(post.title)  # N: Revealed type is 'builtins.str'
      reveal_type(post.published)  # N: Revealed type is 'builtins.bool'
      reveal_type(post.title.lower())  # N: Revealed type is 'builtins.str'
      oops = post.oops  # E: "Post" has no attribute "oops"  [attr-defined]

      post = await client.post.create({'title': 'Hello', 'published': True, 'desc': 'description'})
      reveal_type(post.id)  # N: Revealed type is 'builtins.str'
      reveal_type(post.desc)  # N: Revealed type is 'Union[builtins.str, None]'
      reveal_type(post.title)  # N: Revealed type is 'builtins.str'

- case: create_dynamic_data
  main: |
    from prisma import Client
    from prisma.types import PostCreateInput

    async def main() -> None:
      client = Client()

      data = {
        'title': 'hello',
        'published': True,
      }  # type: PostCreateInput

      if True:
        data['id'] = '983293asdsad'
        data['invalid'] = True  # E: TypedDict "PostCreateInput" has no key 'invalid'  [misc]

      await client.post.create(data)

