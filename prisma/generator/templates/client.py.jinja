{% include '_header.py.jinja' %}
# -- template client.py.jinja --
from collections import defaultdict
from pydantic import BaseModel, validate_arguments

from prisma import types, models, errors
from prisma.engine import QueryEngine
from prisma.builder import QueryBuilder


__all__ = (
    'Client',
)

SCHEMA = '''
{{ datamodel }}
'''


class Client:
    {% for model in dmmf.datamodel.models %}
    {{ model.name.lower() }}: '{{ model.name }}Actions'
    {% endfor %}

    def __init__(self) -> None:
        {% for model in dmmf.datamodel.models %}
        self.{{ model.name.lower() }} = {{ model.name }}Actions(self)
        {% endfor %}
        self._engine: Optional[QueryEngine] = None

    def __del__(self) -> None:
        if self._engine is not None:
            self._engine.stop()
            self._engine = None

    async def connect(self) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self._engine is None:
            self._engine = QueryEngine(dml=SCHEMA)

        await self._engine.connect()

    async def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self._engine is not None:
            self._engine.disconnect()
            await self._engine.close_session()
            self._engine = None

    async def execute_raw(self, query: str, *args: Any) -> int:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='executeRaw',
            arguments={'query': query, 'parameters': args}
        )
        resp = await builder.execute()
        return int(resp['data']['result'])

    @overload
    async def query_raw(self, query: str, *args: Any) -> Any:
        ...

    {% for model in dmmf.datamodel.models %}
    @overload
    async def query_raw(self, query: str, *args: Any, model: Type['models.{{ model.name }}']) -> List['models.{{ model.name }}']:
        ...

    {% endfor %}

    async def query_raw(self, query: str, *args: Any, model: Optional[Type[BaseModel]] = None) -> Union[List[BaseModel], Any]:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='queryRaw',
            arguments={'query': query, 'parameters': args}
        )
        result = (await builder.execute())['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result


{% for model in dmmf.datamodel.models %}

class {{ model.name }}Actions:
    def __init__(self, client: Client):
        self.client = client
        self._field_aliases = self._gen_field_aliases(models.{{ model.name }}, defaultdict(dict), key='')

    def _gen_field_aliases(self, model: Type[BaseModel], aliases: Dict[str, Dict[str, str]], *, key: str) -> Dict[str, Dict[str, str]]:
        # TODO: these field aliases could clash, see GitHub #3
        for field, info in model.__fields__.items():
            if info.type_.__module__ == 'prisma.models':
                if field not in aliases:
                    self._gen_field_aliases(info.type_, aliases, key=field)
            else:
                aliases[key][field] = info.alias
        return aliases

    async def create(self, data: types.{{ model.name }}CreateInput, include: Optional[types.{{ model.name}}Include]=None) -> models.{{ model.name }}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='createOne',
            model='{{ model.name }}',
            include=include,
            arguments={'data': data},
            aliases=self._field_aliases,
        )
        resp = await builder.execute()
        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    async def delete(self, where: types.{{ model.name }}WhereUniqueInput, include: Optional[types.{{ model.name}}Include]=None) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='deleteOne',
            model='{{ model.name }}',
            include=include,
            arguments={'where': where},
            aliases=self._field_aliases,
        )

        try:
            resp = await builder.execute()
        except errors.RecordNotFoundError:
            return None

        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    async def find_unique(self, where: types.{{ model.name }}WhereUniqueInput, include: Optional[types.{{ model.name}}Include]=None) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findOne',
            model='{{ model.name }}',
            include=include,
            arguments={'where': where},
            aliases=self._field_aliases,
        )
        resp = await builder.execute()
        result = resp['data']['result']
        if result is None:
            return None
        return models.{{ model.name }}.parse_obj(result)


{% endfor %}
