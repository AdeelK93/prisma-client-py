{% include '_header.py.jinja' %}
# -- template client.py.jinja --
from enum import Enum
from pydantic import BaseModel, validate_arguments

from prisma import types, models
from prisma.engine import QueryEngine
from prisma.builder import QueryBuilder


__all__ = (
    'Client',
)

SCHEMA = '''
{{ datamodel }}
'''


class Client:
    {% for model in dmmf.datamodel.models %}
    {{ model.name.lower() }}: '{{ model.name }}Actions'
    {% endfor %}

    def __init__(self) -> None:
        {% for model in dmmf.datamodel.models %}
        self.{{ model.name.lower() }} = {{ model.name }}Actions(self)
        {% endfor %}
        self._engine: Optional[QueryEngine] = None

    def __del__(self) -> None:
        if self._engine is not None:
            self._engine.stop()
            self._engine = None

    async def connect(self) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self._engine is None:
            self._engine = QueryEngine(dml=SCHEMA)

        await self._engine.connect()

    async def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self._engine is not None:
            self._engine.disconnect()
            await self._engine.close_session()
            self._engine = None

    async def execute_raw(self, query: str, *args: Any) -> int:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='executeRaw',
            arguments={'query': query, 'parameters': args}
        )
        resp = await builder.execute()
        return int(resp['data']['result'])

    @overload
    async def query_raw(self, query: str, *args: Any, model: None) -> Any:
        ...

    {% for model in dmmf.datamodel.models %}
    @overload
    async def query_raw(self, query: str, *args: Any, model: Type['models.{{ model.name }}']) -> List['models.{{ model.name }}']:
        ...

    {% endfor %}

    async def query_raw(self, query: str, *args: Any, model: Optional[Type[BaseModel]] = None) -> Union[List[BaseModel], Any]:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='queryRaw',
            arguments={'query': query, 'parameters': args}
        )
        result = (await builder.execute())['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result


{% for enum in dmmf.datamodel.enums %}
class {{ enum.name }}Enum(str, Enum):
    {% for value in enum.values %}
    {{ value.name }} = '{{ value.name }}'
    {% endfor %}
{% endfor %}


{% for model in dmmf.datamodel.models %}

class {{ model.name }}Actions:
    def __init__(self, client: Client):
        self.client = client

    # TODO: add support for select and include
    @validate_arguments
    async def create(self, data: types.{{ model.name }}CreateInput) -> models.{{ model.name }}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='createOne',
            model='{{ model.name }}',
            fields=list(models.{{ model.name }}.schema()['properties'].keys()),
            arguments={'data': data}
        )
        resp = await builder.execute()
        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    @validate_arguments
    async def find_unique(self, where: types.{{ model.name }}WhereUniqueInput) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findOne',
            model='{{ model.name }}',
            fields=list(models.{{ model.name }}.schema()['properties'].keys()),
            arguments={'where': where},
        )
        resp = await builder.execute()
        result = resp['data']['result']
        if result is None:
            return None
        return models.{{ model.name }}.parse_obj(result)


{% endfor %}
