# -- client.py.jinja --
from enum import Enum
from pydantic import BaseModel, Field, validate_arguments

from prisma import types
from prisma.engine import QueryEngine
from prisma.builder import QueryBuilder


__all__ = (
    'Client',
)

SCHEMA = '''
{{ datamodel }}
'''


class Client:
    {% for model in dmmf.datamodel.models %}
    {{ model.name.lower() }}: '{{ model.name }}Actions'
    {% endfor %}

    def __init__(self) -> None:
        {% for model in dmmf.datamodel.models %}
        self.{{ model.name.lower() }} = {{ model.name }}Actions(self)
        {% endfor %}
        self._engine: Optional[QueryEngine] = None

    def __del__(self) -> None:
        if self._engine is not None:
            self._engine.stop()
            self._engine = None

    async def connect(self) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self._engine is None:
            self._engine = QueryEngine(dml=SCHEMA)

        await self._engine.connect()

    async def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self._engine is not None:
            self._engine.disconnect()
            await self._engine.close_session()
            self._engine = None


{% for enum in dmmf.datamodel.enums %}
class {{ enum.name }}Enum(str, Enum):
    {% for value in enum.values %}
    {{ value.name }} = '{{ value.name }}'
    {% endfor %}
{% endfor %}


{% for model in dmmf.datamodel.models %}
class {{ model.name }}(BaseModel):
    {% for field in model.all_fields %}
    {{ field.python_case }}:
            {%- if field.is_required -%}
                {{ ' ' }}{{ field.python_type }} = Field(alias='{{ field.name }}')
            {% else -%}
                {{ ' ' }}Optional[{{ field.python_type }}] = Field(alias='{{ field.name }}')
            {% endif %}
    {% endfor %}

    class Config:
        use_enum_values = True


class {{ model.name }}Actions:
    def __init__(self, client: Client):
        self.client = client

    # TODO: add support for select and include
    @validate_arguments
    async def create(self, data: types.{{ model.name }}CreateInput) -> {{ model.name }}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='createOne',
            model='{{ model.name }}',
            fields=list({{ model.name }}.schema()['properties'].keys()),
            arguments={'data': data}
        )
        resp = await builder.execute()
        return {{ model.name }}.parse_obj(resp['data']['result'])

    @validate_arguments
    async def find_unique(self, where: types.{{ model.name }}WhereUniqueInput) -> {{ model.name }}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findOne',
            model='{{ model.name }}',
            fields=list({{ model.name }}.schema()['properties'].keys()),
            arguments={'where': where},
        )
        resp = await builder.execute()
        return {{ model.name }}.parse_obj(resp['data']['result'])


{% endfor %}

# required to support relationships between models
{% for model in dmmf.datamodel.models %}
{{ model.name }}.update_forward_refs()
{% endfor %}
