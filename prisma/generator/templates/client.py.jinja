# -- client.py.jinja --
from pydantic import BaseModel, validate_arguments
from prisma.engine import QueryEngine


__all__ = (
    'Client',
)

SCHEMA = '''
{{ datamodel }}
'''


class Client:
    {% for model in dmmf.datamodel.models %}
    {{ model.name.lower() }}: '{{ model.name }}Actions'
    {% endfor %}

    def __init__(self):
        {% for model in dmmf.datamodel.models %}
        self.{{ model.name.lower() }} = {{ model.name }}Actions(self)
        {% endfor %}
        self._engine = None

    def __del__(self):
        if self._engine is not None:
            self._engine.stop()
            self._engine = None

    async def connect(self):
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self._engine is None:
            self._engine = QueryEngine(dml=SCHEMA)

        await self._engine.connect()

    async def disconnect(self):
        """Disconnect the Prisma query engine."""
        if self._engine is not None:
            self._engine.disconnect()
            await self._engine.close_session()
            self._engine = None


{% for model in dmmf.datamodel.models %}
class {{ model.name }}Type(BaseModel):
    {% for field in model.fields %}
    {{ field.python_case }}:
            {%- if field.isRequired -%}
                {{ ' ' }}{{ field.python_type }}
            {% else -%}
                {{ ' ' }}Optional[{{ field.python_type }}]
            {% endif %}
    {% endfor %}


class {{ model.name }}Actions:
    def __init__(self, client: Client):
        self.client = client

{% endfor %}
