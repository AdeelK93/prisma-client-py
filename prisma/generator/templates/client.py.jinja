{% include '_header.py.jinja' %}
{% from '_utils.py.jinja' import maybe_async_def, maybe_await with context %}
# -- template client.py.jinja --
from collections import defaultdict
from pydantic import BaseModel, validate_arguments

from . import types, models, errors
from .engine import QueryEngine
from .builder import QueryBuilder


__all__ = (
    'Client',
)

SCHEMA = '''
{{ datamodel }}
'''


class Client:
    {% for model in dmmf.datamodel.models %}
    {{ model.name.lower() }}: '{{ model.name }}Actions'
    {% endfor %}

    def __init__(self) -> None:
        {% for model in dmmf.datamodel.models %}
        self.{{ model.name.lower() }} = {{ model.name }}Actions(self)
        {% endfor %}
        self.__engine: Optional[QueryEngine] = None

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    {{ maybe_async_def }}connect(self, timeout: int = 10) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self.__engine is None:
            self.__engine = QueryEngine(dml=SCHEMA)

        {{ maybe_await }}self.__engine.connect(timeout=timeout)

    {{ maybe_async_def }}disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            self.__engine.disconnect()
            {{ maybe_await }}self.__engine.close_session()
            self.__engine = None

    {{ maybe_async_def }}execute_raw(self, query: str, *args: Any) -> int:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='executeRaw',
            arguments={'query': query, 'parameters': args}
        )
        resp = {{ maybe_await }}builder.execute()
        return int(resp['data']['result'])

    @overload
    {{ maybe_async_def }}query_raw(self, query: str, *args: Any) -> Any:
        ...

    {% for model in dmmf.datamodel.models %}
    @overload
    {{ maybe_async_def }}query_raw(self, query: str, *args: Any, model: Type['models.{{ model.name }}']) -> List['models.{{ model.name }}']:
        ...

    {% endfor %}

    {{ maybe_async_def }}query_raw(
        self, query: str, *args: Any, model: Optional[Type[BaseModel]] = None
    ) -> Union[List[BaseModel], Any]:
        builder = QueryBuilder(
            engine=self._engine,
            operation='mutation',
            method='queryRaw',
            arguments={'query': query, 'parameters': args}
        )
        result = ({{ maybe_await }}builder.execute())['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result

    @property
    def _engine(self) -> QueryEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine


{% for model in dmmf.datamodel.models %}

class {{ model.name }}Actions:
    def __init__(self, client: Client):
        self.client = client
        self._field_aliases = self._gen_field_aliases(models.{{ model.name }}, defaultdict(dict), key='')

    def _gen_field_aliases(
        self, model: Type[BaseModel], aliases: Dict[str, Dict[str, str]], *, key: str
    ) -> Dict[str, Dict[str, str]]:
        # TODO: these field aliases could clash, see GitHub #3
        for field, info in model.__fields__.items():
            if info.type_.__module__ == f'{__package__}.models':
                if field not in aliases:
                    self._gen_field_aliases(info.type_, aliases, key=field)
            else:
                aliases[key][field] = info.alias
        return aliases

    {{ maybe_async_def }}create(
        self,
        data: types.{{ model.name }}CreateInput,
        include: Optional[types.{{ model.name}}Include] = None
    ) -> models.{{ model.name }}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='createOne',
            model='{{ model.name }}',
            include=include,
            arguments={'data': data},
            aliases=self._field_aliases,
        )
        resp = {{ maybe_await }}builder.execute()
        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    {{ maybe_async_def }}delete(
        self,
        where: types.{{ model.name }}WhereUniqueInput,
        include: Optional[types.{{ model.name}}Include] = None
    ) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='deleteOne',
            model='{{ model.name }}',
            include=include,
            arguments={'where': where},
            aliases=self._field_aliases,
        )

        try:
            resp = {{ maybe_await }}builder.execute()
        except errors.RecordNotFoundError:
            return None

        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    {{ maybe_async_def }}find_unique(
        self,
        where: types.{{ model.name }}WhereUniqueInput,
        include: Optional[types.{{ model.name}}Include] = None
    ) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findOne',
            model='{{ model.name }}',
            include=include,
            arguments={'where': where},
            aliases=self._field_aliases,
        )
        resp = {{ maybe_await }}builder.execute()
        result = resp['data']['result']
        if result is None:
            return None
        return models.{{ model.name }}.parse_obj(result)

    {{ maybe_async_def }}find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.{{ model.name }}WhereInput] = None,
        cursor: Optional[types.{{ model.name }}WhereUniqueInput] = None,
        include: Optional[types.{{ model.name }}Include] = None,
        order: Optional[Union[types.{{ model.name }}OrderByInput, List[types.{{ model.name }}OrderByInput]]] = None,
    ) -> List[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findMany',
            model='{{ model.name }}',
            include=include,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            aliases=self._field_aliases,
        )
        resp = {{ maybe_await }}builder.execute()
        return [models.{{ model.name }}.parse_obj(r) for r in resp['data']['result']]

    {{ maybe_async_def }}find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.{{ model.name }}WhereInput] = None,
        cursor: Optional[types.{{ model.name }}WhereUniqueInput] = None,
        include: Optional[types.{{ model.name }}Include] = None,
        order: Optional[Union[types.{{ model.name }}OrderByInput, List[types.{{ model.name }}OrderByInput]]] = None,
    ) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='findFirst',
            model='{{ model.name }}',
            include=include,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            aliases=self._field_aliases,
        )
        resp = {{ maybe_await }}builder.execute()
        result = resp['data']['result']
        if result is None:
            return None
        return models.{{ model.name }}.parse_obj(result)

    {{ maybe_async_def }}update(
        self,
        data: types.{{ model.name }}UpdateInput,
        where: types.{{ model.name }}WhereUniqueInput,
        include: Optional[types.{{ model.name}}Include] = None
    ) -> Optional[models.{{ model.name }}]:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='updateOne',
            model='{{ model.name }}',
            include=include,
            arguments={'data': data, 'where': where},
            aliases=self._field_aliases,
        )

        try:
            resp = {{ maybe_await }}builder.execute()
        except errors.RecordNotFoundError:
            return None

        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    {{ maybe_async_def }}upsert(
        self,
        where: types.{{ model.name }}WhereUniqueInput,
        data: types.{{ model.name }}UpsertInput,
        include: Optional[types.{{ model.name}}Include] = None,
    ) -> models.{{ model.name}}:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='upsertOne',
            model='{{ model.name }}',
            include=include,
            arguments={'where': where, **data},
            aliases=self._field_aliases,
        )
        resp = {{ maybe_await }}builder.execute()
        return models.{{ model.name }}.parse_obj(resp['data']['result'])

    {{ maybe_async_def }}update_many(
        self,
        data: types.{{ model.name }}UpdateManyMutationInput,
        where: types.{{ model.name }}WhereInput,
    ) -> int:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='updateMany',
            model='{{ model.name }}',
            arguments={'data': data, 'where': where,},
            aliases=self._field_aliases,
            root_selection=['count'],
        )
        resp = {{ maybe_await }}builder.execute()
        return int(resp['data']['result']['count'])

    {{ maybe_async_def }}count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.{{ model.name }}WhereInput] = None,
        cursor: Optional[types.{{ model.name }}WhereUniqueInput] = None,
        include: Optional[types.{{ model.name }}Include] = None,
        order: Optional[Union[types.{{ model.name }}OrderByInput, List[types.{{ model.name }}OrderByInput]]] = None,
    ) -> int:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='query',
            method='aggregate',
            model='{{ model.name }}',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            aliases=self._field_aliases,
            root_selection=['count'],
        )
        resp = {{ maybe_await }}builder.execute()
        return int(resp['data']['result']['count'])

    {{ maybe_async_def }}delete_many(
        self,
        where: Optional[types.{{ model.name }}WhereInput] = None
    ) -> int:
        builder = QueryBuilder(
            engine=self.client._engine,
            operation='mutation',
            method='deleteMany',
            model='{{ model.name }}',
            arguments={'where': where or {}},
            aliases=self._field_aliases,
            root_selection=['count'],
        )
        resp = {{ maybe_await }}builder.execute()
        return int(resp['data']['result']['count'])

{% endfor %}
